-- EXAMPLE
local on_attach = require("nvchad.configs.lspconfig").on_attach
local on_init = require("nvchad.configs.lspconfig").on_init
local capabilities = require("nvchad.configs.lspconfig").capabilities

local lspconfig = require "lspconfig"
local servers = {
  tsserver = {},
  prettierd = {},
  prettier = {},
  eslintd = {},
  eslint = {},
  actionlint = {},
  -- ada-language-server = {},
  alex = {},
  angularls = {},
  -- ansible-language-server = {},
  -- ansible-lint = {},
  -- antlers-language-server = {},
  -- apex-language-server = {},
  -- arduino-language-server = {},
  -- asmfmt = {},
  -- ast-grep = {},
  -- astro-language-server = {},
  autoflake = {},
  autopep8 = {},
  -- autotools-language-server = {},
  -- awk-language-server = {},
  -- azure-pipelines-language-server = {},
  -- basedpyright = {},
  -- bash-debug-adapter = {},
  bashls = {},
  basedpyright = {},
  -- bash-debug-adapter = {},
  beautysh = {},
  -- bibtex-tidy = {},
  -- bicep-lsp = {},
  biome = {},
  black = {},
  -- baclkd-client = {},
  -- blade-formatter = {},
  blue = {},
  brighterscript = {},
  -- brighterscript-formatter = {},
  -- bsl-language-server = {},
  bslint = {},
  buildifier = {},
  cbfmt = {},
  bzl = {},
  -- cds-lasp = {},
  -- checkmate = {},
  -- checkstyle = {},
  -- chrome-debug-adapter = {},
  -- circleci-yaml-language-server = {},
  -- clang-format = {},
  -- clangd = {},
  -- clarient = {},
  -- clj-kondo = {},
  -- cljfmt = {},
  clojure_lsp = {},
  -- cmake-language-server = {},
  cmakelang = {},
  -- cobol-language-support = {},
  cmakelang = {},
  cmakelint = {},
  codellqd = {},
  codespell = {},
  -- coffeesense-language-server = {},
  commitlint = {},
  -- cortext-debug = {},
  cpplint = {},
  cpptools = {},
  -- cql-language-server = {},
  crystalline = {},
  cspell = {},
  cssls = {},
  css_variables = {},
  cssmodules_ls = {},
  curlylint = {},
  -- cucumber-language-server = {},
  -- darker = {},
  -- dart-debug-adapter = {},
  dcm = {},
  debugpy = {},
  deno = {},
  detekt = {},
  dhall_lsp = {},
  diagnostic_ls = {},
  docformatter = {},
  djlint = {},
  docker_compose_language_service = {},
  dockerls = {},
  dprint = {},
  doctoc = {},
  dotls = {},
  -- drools-lsp = {},
  -- elm-format = {},
  -- fm = {},
  -- elixir-ls = {},
  -- elm-language-server = {},
  -- eslint-lsp = {},
  -- eslint_d = {},
  -- facility-language-server = {},
  -- emmet_ls = {},
  -- emmet-language-server = {},
  -- ember-language-server = {},
  -- findent = {},
  -- facility-language-server = {},
  -- formolu = {},
  -- fprettify = {},
  -- gitleaks = {},
  -- gitlint = {},
  -- gitui = {},
  -- glint = {},
  -- hoon-language-server = {},
  html = {},
  htmlhint = {},
  jdtls = {},
  -- java-test = {},
  jsonlint = {},
  jsonlsp = {
    settings = {
      json = {
        schemas = require("schemastore").json.schemas(),
        validate = { enable = true },
      },
    },
  },
  -- jsonld-lsp = {},
  -- kotlin-debug-adapter = {},
  -- kotlin-language-server = {},
  -- lua-language-server = {},
  -- luau-lsp = {},
  -- markdown-oxide = {},
  -- markdown-toc = {},
  marksman = {},
  oxlint = {},
  primsals = {},
  proselint = {},
  -- purecsript-tidy = {},
  -- purescript-langauge-server = {},
  -- remark-cli = {},
  -- pyright = {},
  -- pyflakes = {},
  -- pyink = {},
  -- pylama = {},
  -- reorder-python-imports = {},
  rescriptls = {},
  -- rescript-slp = {},
  -- ripper-tags = {},
  -- shopify-cli = {},
  -- selene = {},
  -- solidity = {},
  tailwindcss = {},
  svelte = {},
  stylua = {},
  stylelint = {},
  -- stylelint-lsp = {},
  trivy = {},
  trufflehog = {},
  -- vim-language-server = {},
  yamlls = {
    settings = {
      yaml = {
        schemaStore = {
          -- You must disable built-in schemaStore support if you want to use
          -- this plugin and its advanced options like `ignore`.
          enable = false,
          -- Avoid TypeError: Cannot read properties of undefined (reading 'length')
          url = "",
        },
        schemas = require("schemastore").yaml.schemas(),
      },
    },
  },
  yamlfix = {},
  yamlfmt = {},
  yamllint = {},
  zprint = {},
}

-- lsps with default config
for _, lsp in ipairs(servers) do
  lspconfig[lsp].setup {
    on_attach = on_attach,
    on_init = on_init,
    capabilities = capabilities,
  }
end

-- typescript
lspconfig.tsserver.setup {
  on_attach = function(client, bufnr)
    on_attach(client, bufnr)
    require("twoslash-queries").attach(client, bufnr)
  end,
  on_init = on_init,
  capabilities = capabilities,
}
